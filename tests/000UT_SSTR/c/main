#ifdef __CC_NORCROFT
#include "CoreLib:safe_str.h"
#else
#include "../../!CoreLib/h/safe_str.h"
#endif

#include "../test_lib.h"
#include "main.h"
#include <stdio.h>

int main(void) {
    test_failures(RESET_FAILURES);
    write_string("Testing safe_str module...\n");

    write_string("- Testing safe memory functions...\n");

    // safe_memcpy
    unsigned char src[] = "12345678";
    unsigned char dst[10] = {0};
    ASSERT_EQ(safe_memcpy(dst, src, 8), dst, "SM100: safe_memcpy return");
    ASSERT_EQ(memcmp(dst, src, 8), 0, "SM101: safe_memcpy content");

    // safe_memmove with overlap
    char movbuf[] = "abcdef";
    ASSERT_EQ(safe_memmove(movbuf + 2, movbuf, 4), movbuf + 2, "SM110: safe_memmove overlap");
    ASSERT_EQ(memcmp(movbuf + 2, "abcd", 4), 0, "SM111: safe_memmove overlap content");

    // safe_memset
    char zeroed[6];
    ASSERT_EQ(safe_memset(zeroed, 0x55, 6), zeroed, "SM120: safe_memset return");
    for (int i = 0; i < 6; ++i)
    ASSERT_EQ(zeroed[i], 0x55, "SM121: safe_memset content");

    // Test 1: safe_strnlen and find_null
    ASSERT_EQ(safe_strnlen("abc", 10), 3, "S100: safe_strnlen normal case");
    ASSERT_EQ(find_null("abc", 10), 3, "S101: find_null normal case");
    ASSERT_EQ(safe_strnlen("abc", 2), 2, "S102: safe_strnlen maxlen clamp");
    ASSERT_EQ(find_null("abc", 2), 0, "S103: find_null failure triggers");

    // Test 2: safe_strncpy and safe_strndup
    char buf[10];
    // ASSERT_OK compares with 0, so we need to negate the result
    ASSERT_OK(!(safe_strncpy(buf, "hi", sizeof(buf)) != NULL), "S110: safe_strncpy success");
    ASSERT_EQ(strcmp(buf, "hi"), 0, "S111: safe_strncpy copies content");

    char *dup = safe_strndup("hello", 5);
    ASSERT_NE(dup, NULL, "S112: safe_strndup allocates");
    ASSERT_EQ(strcmp(dup, "hello"), 0, "S113: safe_strndup content");
    free(dup);

    // Test 3: safe_strcmp and flag variants
    ASSERT_EQ(safe_strcmp("Test", "test", IGNORE_CASE), 0, "S120: case-insensitive match");
    ASSERT_EQ(safe_strcmp("T est", "test", IGNORE_WHITESPACE | IGNORE_CASE), 0, "S121: ignore space and case");
    ASSERT_NE(safe_strcmp("abc", "def", 0), 0, "S122: strcmp mismatch");

    // Test 4: safe_strstart / end / hasprefix / hassuffix
    ASSERT_EQ(safe_strstart("foobar", "foo", 0), 1, "S130: safe_strstart");
    ASSERT_EQ(safe_strend("foobar", "bar", 0), 1, "S131: safe_strend");
    ASSERT_EQ(safe_strhasprefix("foobar", "foo"), 1, "S132: safe_strhasprefix");
    ASSERT_EQ(safe_strhassuffix("foobar", "bar"), 1, "S133: safe_strhassuffix");

    // Test 5: safe_strncat and safe_strcat
    char buf2[16] = "hi";
    // ASSERT_OK compares with 0, so we need to negate the result
    ASSERT_OK(!(safe_strncat(buf2, " there", sizeof(buf2)) != NULL), "S140: safe_strncat");
    ASSERT_EQ(strcmp(buf2, "hi there"), 0, "S141: safe_strncat content");

    char buf3[16] = "safe";
    // ASSERT_OK compares with 0, so we need to negate the result
    ASSERT_OK(!(safe_strcat(buf3, "_cat") != NULL), "S142: safe_strcat");
    ASSERT_EQ(strcmp(buf3, "safe_cat"), 0, "S143: safe_strcat content");

    // Test 6: safe_strstrip
    char buf4[16] = "  padded  ";
    ASSERT_EQ(strcmp(safe_strstrip(buf4), "padded"), 0, "S150: safe_strstrip trims");

    // Test 7: safe_strchrnul
    ASSERT_EQ(*safe_strchrnul("abc", 'c', 10), 'c', "S160: safe_strchrnul finds");
    ASSERT_EQ(*safe_strchrnul("abc", 'x', 10), '\0', "S161: safe_strchrnul fallback");

    // Test 8: safe_strcount
    ASSERT_EQ(safe_strcount("a,b,c", ',', 10), 2, "S170: safe_strcount counts commas");

    // Test 9: safe_strcpyz
    char buf5[8];
    // ASSERT_OK compares with 0, so we need to negate the result
    ASSERT_OK(!(safe_strcpyz(buf5, "foo", sizeof(buf5)) != NULL), "S180: safe_strcpyz success");
    ASSERT_EQ(strcmp(buf5, "foo"), 0, "S181: safe_strcpyz content");
    ASSERT_EQ(buf5[7], 0, "S182: safe_strcpyz zero-padded");

    // Test 10: safe_strvalid and safe_strisprintable
    ASSERT_EQ(safe_strvalid("ok", 10), 1, "S190: safe_strvalid pass");
    ASSERT_EQ(safe_strisprintable("hi!", 10), 1, "S191: printable");
    ASSERT_EQ(safe_strisprintable("hi\x01", 10), 0, "S192: non-printable");

    // Test 11: safe_strtok_r
    char mutable[32] = "a,b,c";
    char *save;
    char *tok = safe_strtok_r(mutable, ",", &save);
    ASSERT_EQ(strcmp(tok, "a"), 0, "S200: strtok first");
    tok = safe_strtok_r(NULL, ",", &save);
    ASSERT_EQ(strcmp(tok, "b"), 0, "S201: strtok second");
    tok = safe_strtok_r(NULL, ",", &save);
    ASSERT_EQ(strcmp(tok, "c"), 0, "S202: strtok third");
    tok = safe_strtok_r(NULL, ",", &save);
    ASSERT_EQ(tok, NULL, "S203: strtok end");

    // More safety tests

    // NULL Pointers and zero lengths

    ASSERT_EQ(safe_strnlen(NULL, 10), 0, "S300: strnlen NULL returns 0");
    ASSERT_EQ(safe_strnlen("abc", 0), 0, "S301: strnlen 0 maxlen returns 0");

    ASSERT_EQ(find_null(NULL, 10), 0, "S302: find_null NULL returns 0");

    ASSERT_FAIL(safe_strncpy(NULL, "hi", 10) == NULL, "S303: strncpy NULL dest fails");
    ASSERT_FAIL(safe_strncpy(buf, NULL, 10) == NULL, "S304: strncpy NULL src fails");
    ASSERT_FAIL(safe_strncpy(buf, "hi", 0) == NULL, "S305: strncpy zero size fails");

    ASSERT_EQ(safe_strcmp(NULL, "abc", 0), -2, "S306: strcmp NULL left");
    ASSERT_EQ(safe_strcmp("abc", NULL, 0), -2, "S307: strcmp NULL right");

    // Buffers overrun and unterminated strings
    char raw[4] = { 'a', 'b', 'c', 'd' };  // No null
    ASSERT_EQ(safe_strnlen(raw, 4), 4, "S310: strnlen un-terminated fails");
    ASSERT_EQ(find_null(raw, 4), 0, "S311: find_null un-terminated fails");

    ASSERT_FAIL(safe_strncpy(buf, "12345678901234567890", sizeof(buf)) != NULL, "S312: strncpy overlength fails");

    // Boundary testing with truncated spaces

    char buf7[4];
    ASSERT_FAIL(safe_strncpy(buf7, "abcd", 4) != NULL, "S320: strncpy exact fill fails (no room for null)");

    char buf8[5];
    ASSERT_OK(!(safe_strncpy(buf8, "abcd", 5) != NULL), "S321: strncpy fits with null");
    ASSERT_EQ(buf8[4], '\0', "S322: strncpy last byte is null");

    // Overlapping buffers

    char overlap[] = "abcdef";
    safe_memmove(overlap + 2, overlap, 4);  // "ababcd"
    ASSERT_EQ(overlap[2], 'a', "S330: memmove overlap copied a");
    ASSERT_EQ(overlap[5], 'd', "S331: memmove overlap copied d");

    // Zerofill checks

    char padded[8];
    safe_strcpyz(padded, "xy", sizeof(padded));
    ASSERT_EQ(padded[2], 0, "S340: strcpyz zero padded");
    ASSERT_EQ(padded[7], 0, "S341: strcpyz last byte zero");

    // Whitespaces and specials ignoring

    ASSERT_EQ(safe_strcmp("a!b", "ab", IGNORE_PUNCT), 0, "S350: ignore punctuation");
    ASSERT_EQ(safe_strcmp("a1b", "ab", IGNORE_DIGITS), 0, "S351: ignore digits");
    ASSERT_EQ(safe_strcmp("a#b", "ab", IGNORE_SPECIAL), 0, "S352: ignore non-alnum");

    // Tokenization edge cases

    char toks[] = ",,x,,y";
    char *save2;
    char *tok2 = safe_strtok_r(toks, ",", &save2);
    ASSERT_EQ(strcmp(tok2, "x"), 0, "S360: strtok skip leading empty");
    tok2 = safe_strtok_r(NULL, ",", &save2);
    ASSERT_EQ(strcmp(tok2, "y"), 0, "S361: strtok skip trailing empty");
    tok2 = safe_strtok_r(NULL, ",", &save2);
    ASSERT_EQ(tok2, NULL, "S362: strtok final NULL");

    // Flags misuse
    printf("test: %d\n", safe_strcmp("abc", "xyz", 0xFF));
    ASSERT_NE(safe_strcmp("abc", "xyz", 0xFF), 0, "S370: even all flags shouldn't match");

    int result = safe_strcmp("abc", "abc", 0x8000); // invalid high bit
    ASSERT_EQ(result, 0, "S371: unknown flags ignored, match still valid");


    safe_strnlen(raw, 4);
    ASSERT_ERRNO(ENAMETOOLONG, "S380: errno on unterminated str");

    if (test_failures(GET_FAILURES) == 0)
        write_string("PASS: safe_str module\n");
    else
        write_string("FAIL: safe_str module\n");

    return test_failures(GET_FAILURES);
}
