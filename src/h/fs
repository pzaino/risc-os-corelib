#ifndef __LIBOS_FS_H__
#define __LIBOS_FS_H__

/*
 * CoreLib - POSIX-like and SWI-safe C Library for RISC OS
 *
 * File: fs.h
 * Author: Paolo Fabio Zaino
 * Copyright (c) 1998-2025 by Paolo Fabio Zaino, all rights reserved
 * Distributed under: Mozilla Public License 2.0 (MPL-2.0)
 *
 * Description:
 *   This file is part of CoreLib, a safe and portable ANSI C99 library that
 *   provides POSIX-style APIs for RISC OS. It wraps RISC OS SWIs with strict
 *   validation and aims to be CLib-independent while enabling safe development
 *   of applications, kernel modules, and system utilities.
 *
 *   This source code is licensed under the terms of the Mozilla Public License
 *   Version 2.0. You may obtain a copy of the license at:
 *   https://www.mozilla.org/MPL/2.0/
 *
 *   SPDX-License-Identifier: MPL-2.0
 */

#ifdef __CC_NORCROFT
#pragma include_only_once
#endif

#include "common.h"
#include <stddef.h>

#define OS_MAX_PATH 256
#define OS_COPY_BUF 1024
#define INVALID_PATH(p) (!(p) || *(p) == '\0')

#ifndef SEEK_SET
#define SEEK_SET 0
#endif
#ifndef SEEK_CUR
#define SEEK_CUR 1
#endif
#ifndef SEEK_END
#define SEEK_END 2
#endif

#ifdef __cplusplus
extern "C" {
#endif

// Replacement for struct stat using only types available in ANSI C
typedef struct os_stat_t {
    unsigned int st_size;
    unsigned int st_mtime;
    int st_mode;
} os_stat_t;

typedef struct os_dir_t {
    int context;
    char path[256];
    char entry[256];
} os_dir_t;

typedef struct os_dirent_t {
    char d_name[256];
} os_dirent_t;

int os_mkdir(const char *path, int mode);
int os_rmdir(const char *path);
int os_chdir(const char *path);
char *os_getcwd(char *buf, size_t size);
int os_unlink(const char *path);
int os_rename(const char *oldpath, const char *newpath);
int os_stat(const char *path, struct os_stat_t *st);
int os_access(const char *pathname, int mode);

int os_open(const char *path, int flags, int mode);
int os_close(int fd);
int os_close_path(const char *path);
char *os_get_open_files_list(void);
int os_stat_fd(int fd, struct os_stat_t *st);
int os_read(int fd, void *buf, size_t count);
int os_read_and_close(int fd, void **buf_out, size_t *len_out);
int os_write(int fd, const void *buf, size_t count);
long os_lseek(int fd, long offset, int whence);

void os_rewinddir(os_dir_t *dirp);
long os_telldir(os_dir_t *dirp);
void os_seekdir(os_dir_t *dirp, long loc);

os_dir_t *os_opendir(const char *path);
os_dirent_t *os_readdir(os_dir_t *dirp);
int os_closedir(os_dir_t *dirp);
int os_chmod(const char *path, int mode);
int os_fchmod(int fd, int mode);
int os_chown(const char *path, int owner, int group);
int os_fchown(int fd, int owner, int group);
int os_umask(int mask);
int os_truncate(const char *path, long length);
int os_ftruncate(int fd, long length);

int os_set_filetype(const char *path, int filetype);
int os_get_filetype(const char *path, int *filetype);
int os_file_exists(const char *path);
int os_is_dir(const char *path);
int os_merge(const char *dest, const char *src);
int os_split(const char *path, long offset, const char *out1, const char *out2);

#ifdef __cplusplus
}
#endif

#endif /* __LIBOS_FS_H__ */
