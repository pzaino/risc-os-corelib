/*
 * CoreLib - POSIX-like and SWI-safe C Library for RISC OS
 *
 * File: path.c
 * Author: Paolo Fabio Zaino
 * Copyright (c) 1998-2025 by Paolo Fabio Zaino, all rights reserved
 * Distributed under: Mozilla Public License 2.0 (MPL-2.0)
 *
 * Description:
 *   This file is part of CoreLib, a safe and portable ANSI C99 library that
 *   provides POSIX-style APIs for RISC OS. It wraps RISC OS SWIs with strict
 *   validation and aims to be CLib-independent while enabling safe development
 *   of applications, kernel modules, and system utilities.
 *
 *   This source code is licensed under the terms of the Mozilla Public License
 *   Version 2.0. You may obtain a copy of the license at:
 *   https://www.mozilla.org/MPL/2.0/
 *
 *   SPDX-License-Identifier: MPL-2.0
 */

/* path.c - Path manipulation helpers for RISC OS (CoreLib) */

#include "common.h"
#include "path.h"
#include "safe_str.h"

//#include <string.h>
//#include <stddef.h>
//#include <stdlib.h>
//#include <stdio.h>

int os_realpath(const char *in, char *out, size_t size) {
    if (!in || !out || size == 0) {
        errno = EINVAL;
        return -1;
    }

    int spare = 0;
    out[0] = '\0';
    const _kernel_oserror *err = _swix(OS_FSControl,
        _INR(0,5) | _OUT(5),
        37, in, out, 0, 0, size, &spare);

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    if ((int)size - spare <= 0) {
        errno = ENAMETOOLONG;
        return -1;
    }

    return 0;
}

// Check if a given path is absolute or relative
int os_path_is_absolute(const char *path) {
    char abs_path[OS_MAX_PATH_LEN];
    if (os_realpath(path, abs_path, sizeof(abs_path)) != 0) {
        return 0; // Failed to get absolute path
    }
    if (safe_strcmp(path, abs_path, IGNORE_CASE) == 0) {
        return 1; // Path is absolute
    }
    return 0;
}

// Join a + "." + b manually with safety
char *os_path_join(const char *a, const char *b, char *out, size_t maxlen) {
    if (!a || !b || !out || maxlen == 0) {
        errno = EINVAL;
        return NULL;
    }

    size_t a_len = safe_strnlen(a, maxlen);
    size_t b_len = safe_strnlen(b, maxlen);

    int need_sep = (a_len > 0 && a[a_len - 1] != '.');
    size_t total = a_len + (need_sep ? 1 : 0) + b_len;

    if (total + 1 > maxlen) {
        errno = ENAMETOOLONG;
        return NULL;
    }

    size_t pos = 0;
    safe_memcpy(out + pos, a, a_len);
    pos += a_len;

    if (need_sep) {
        out[pos++] = '.';
    }

    safe_memcpy(out + pos, b, b_len);
    pos += b_len;

    out[pos] = '\0';
    return out;
}


// Get the base name of a path (the last component after the last dot)
const char *os_path_basename(const char *path) {
    if (!path) {
        errno = EINVAL;
        return NULL;
    }

    size_t len = safe_strnlen(path, LIBOS_MAX_STR_LEN);
    const char *last = safe_strrchr(path, '.', len, 0);
    return last ? last + 1 : path;
}

// Get the directory name of a path (everything before the last dot)
char *os_path_dirname(const char *path, char *out, size_t maxlen) {
    if (!path || !out || maxlen == 0) {
        errno = EINVAL;
        return NULL;
    }

    size_t path_len = safe_strnlen(path, OS_MAX_PATH_LEN);
    const char *last = safe_strrchr(path, '.', path_len, 0);

    if (!last) {
        // No dot found, return "."
        if (maxlen < 2) {
            errno = ENAMETOOLONG;
            return NULL;
        }
        out[0] = '.';
        out[1] = '\0';
        return out;
    }

    size_t len = (size_t)(last - path);
    if (len >= maxlen) {
        errno = ENAMETOOLONG;
        return NULL;
    }

    safe_memcpy(out, path, len);
    out[len] = '\0';
    return out;
}


char *os_path_to_riscos(const char *unix_path, char *out, size_t maxlen) {
    if (!unix_path || !out || maxlen == 0) {
        errno = EINVAL;
        return NULL;
    }

    size_t i = 0;
    if (unix_path[0] == '/') {
        if (maxlen < 3) {
            errno = ENAMETOOLONG;
            return NULL;
        }
        out[i++] = '$';
        out[i++] = '.';
        unix_path++;
    }

    for (; i < maxlen - 1 && *unix_path; ++unix_path) {
        out[i++] = (*unix_path == '/') ? '.' : *unix_path;
    }

    if (*unix_path != '\0') {
        errno = ENAMETOOLONG;
        return NULL;
    }

    out[i] = '\0';
    return out;
}

char *os_path_to_unix(const char *riscos_path, char *out, size_t maxlen) {
    if (!riscos_path || !out || maxlen == 0) {
        errno = EINVAL;
        return NULL;
    }

    size_t i = 0;
    if (riscos_path[0] == '$' && riscos_path[1] == '.') {
        if (maxlen < 2) {
            errno = ENAMETOOLONG;
            return NULL;
        }
        out[i++] = '/';
        riscos_path += 2;
    }

    for (; i < maxlen - 1 && *riscos_path; ++riscos_path) {
        out[i++] = (*riscos_path == '.') ? '/' : *riscos_path;
    }

    if (*riscos_path != '\0') {
        errno = ENAMETOOLONG;
        return NULL;
    }

    out[i] = '\0';
    return out;
}
