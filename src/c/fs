/*
 * CoreLib - POSIX-like and SWI-safe C Library for RISC OS
 *
 * File: fs.c
 * Author: Paolo Fabio Zaino
 * Copyright (c) 1998-2025 by Paolo Fabio Zaino, all rights reserved
 * Distributed under: Mozilla Public License 2.0 (MPL-2.0)
 *
 * Description:
 *   This file is part of CoreLib, a safe and portable ANSI C99 library that
 *   provides POSIX-style APIs for RISC OS. It wraps RISC OS SWIs with strict
 *   validation and aims to be CLib-independent while enabling safe development
 *   of applications, kernel modules, and system utilities.
 *
 *   This source code is licensed under the terms of the Mozilla Public License
 *   Version 2.0. You may obtain a copy of the license at:
 *   https://www.mozilla.org/MPL/2.0/
 *
 *   SPDX-License-Identifier: MPL-2.0
 */

/* fs.c - File system wrappers for RISC OS SWIs (CoreLib) */

#include "common.h"
#include "fs.h"
#include "fcntl.h" // O_RDONLY, etc.
#include "path.h" // for os_realpath, os_path_join etc.

#include <stdlib.h>
#include <string.h>
//#include <stdio.h>

// ----------------------------
// File and Directory Operations
// ----------------------------

// Make a directory
int os_mkdir(const char *path, int mode) {
    (void)mode;
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_File, _INR(0,1), 8, path);  // Create directory
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

// Remove a directory
int os_rmdir(const char *path) {
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    os_stat_t st;
    if (os_stat(path, &st) < 0)
        return -1;

    if ((st.st_mode & 0xF000) != 0x4000) { // Not a directory
        errno = ENOTDIR;
        return -1;
    }

    // Use OS_FSControl 27 with force bit set, no recurse
    int flags = 0; 
    flags |= 0x00001001; // Force delete


    const _kernel_oserror *err = _swix(OS_FSControl, _INR(0,7),
                                       27, path, flags, -1, -1, -1, -1, -1);

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return 0;
}

// Change current working directory
int os_chdir(const char *path) {
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_FSControl, _INR(0,1), 0, path); // Set current dir
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

// Get current working directory
char *os_getcwd(char *buf, size_t size) {
    if (!buf || size == 0) {
        errno = EINVAL;
        return NULL;
    }

    const char *var = "@"; // read @
    int spare = 0;

    const _kernel_oserror *err = _swix(OS_FSControl,
        _INR(0,5) | _OUT(5),
        37, var, buf, 0, 0, size, &spare);

    if (err) {
        errno = os_map_error(err->errnum);
        return NULL;
    }

    return buf;
}

// Unlink (delete) a file
int os_unlink(const char *path) {
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_File, _INR(0,1), 6, path); // Delete file
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

// Rename a file
int os_rename(const char *oldpath, const char *newpath) {
    if (!oldpath || *oldpath == '\0' || !newpath || *newpath == '\0') {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_FSControl, _INR(0,2), 25, oldpath, newpath);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

// Get file status
int os_stat(const char *path, struct os_stat_t *st) {
    if (!path || *path == '\0' || !st) {
        errno = EINVAL;
        return -1;
    }

    int r[10];  // Use r[0] to r[6]
    const _kernel_oserror *err = _swix(OS_File,
                                        _INR(0,1) | _OUTR(0,6),
                                        23, path,
                                        &r[0], &r[1], &r[2], &r[3], &r[4], &r[5], &r[6]);

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    if (r[0] == 0) { // Object not found
        errno = ENOENT;
        return -1;
    }

    st->st_mode = 0;
    if ((r[6] & 0xF000) == 0x1000)  // &1000 = directory/image
        st->st_mode |= 0x4000;      // S_IFDIR placeholder
    else
        st->st_mode |= 0x8000;      // S_IFREG placeholder

    st->st_size = (unsigned int)r[4];   // Length
    st->st_mtime = (unsigned int)r[5]; // Attributes (often encodes timestamp-ish info)
    return 0;
}

// returns an matrix of open files paths
char *os_get_open_files_list(void) {
    static char open_files[256][256];
    int count = 0;
    for (int i = 0; i < 256; i++) {
        int chars = 0;
        const _kernel_oserror *err = _swix(OS_Args, _INR(0,3) | _OUT(2),
                                           7, i, open_files[i], sizeof(open_files[i]), &chars);
        (void)err; // Ignore errors, just stop if no more open files
        if (chars == 0) break; // No more open files
        open_files[i][chars] = '\0'; // null-terminate the path safely
        count++;
    }
    return *open_files; // Return the list of open files
}

// Retrieve file status from a file descriptor
int os_stat_fd(int fd, os_stat_t *st) {
    if (fd < 0 || !st) {
        errno = EINVAL;
        return -1;
    }

    char path[256] = {0};
    int spare = 0;

    const _kernel_oserror *err = _swix(OS_Args,
                                        _INR(0,2) | _IN(5) | _OUT(5),
                                        7, fd, path, sizeof(path), &spare);

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    int used = sizeof(path) - spare;
    if (used <= 0 || used >= (int)sizeof(path)) {
        errno = ENAMETOOLONG;
        return -1;
    }

    path[used] = '\0'; // Safe null-termination
    return os_stat(path, st);
}

// Check if a file exists and is accessible
int os_access(const char *pathname, int mode) {
    (void)mode; // RISC OS doesn’t enforce permissions

    if (!pathname || *pathname == '\0') {
        errno = EINVAL;
        return -1;
    }

    int type = 0;
    const _kernel_oserror *err = _swix(OS_File,
        _INR(0,1) | _OUT(0),
        23, pathname, &type);

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    if (type == 0) {
        errno = ENOENT;
        return -1;
    }

    return 0;
}

// (RISC OS only) Set the filetype of a file
int os_set_filetype(const char *path, int filetype) {
    if (!path || *path == '\0' || filetype < 0 || filetype > 0xFFF) {
        errno = EINVAL;
        return -1;
    }

    filetype &= 0xFFF; // Ensure it's strictly 12-bit

    const _kernel_oserror *err = _swix(OS_File, _INR(0,2),
        18, path, filetype); // filetype in top 3 bytes of load addr
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return 0;
}

int os_get_filetype(const char *path, int *filetype) {
    if (!path || *path == '\0' || !filetype) {
        errno = EINVAL;
        return -1;
    }

    int r[10]; // Enough to hold r0–r6
    const _kernel_oserror *err = _swix(OS_File,
        _INR(0,1) | _OUTR(0,6),
        23, path,
        &r[0], &r[1], &r[2], &r[3], &r[4], &r[5], &r[6]);

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    if (r[0] == 0) {
        errno = ENOENT;
        return -1;
    }

    *filetype = r[6] & 0xFFF; // ensure 12-bit filetype
    return 0;
}


// (RISC OS only) Check if a file exists
int os_file_exists(const char *path) {
    if (!path || *path == '\0') {
        errno = EINVAL;
        return 0;
    }

    int type = 0;
    const _kernel_oserror *err = _swix(OS_File, _INR(0,1) | _OUT(0),
        23, path, &type);
    return (!err && type != 0);
}

int os_is_dir(const char *path) {
    os_stat_t st;
    if (os_stat(path, &st) < 0)
        return 0;
    return ((st.st_mode & 0xF000) == 0x4000); // S_IFDIR
}

// ----------------------------
// File Descriptor Operations
// ----------------------------

// Open a file and return its file descriptor
int os_open(const char *path, int flags, int mode) {
    (void)mode;
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    int access = flags & O_ACCMODE;
    int handle = 0;
    const _kernel_oserror *err = NULL;

    if ((flags & O_CREAT) && access == O_RDWR) {
        err = _swix(OS_Find, _INR(0,1) | _OUT(0), 0xC0, path, &handle);
        if (err) {
            err = _swix(OS_Find, _INR(0,1) | _OUT(0), 0x80, path, &handle);
        }
    } else if ((flags & O_CREAT) && access == O_WRONLY) {
        err = _swix(OS_Find, _INR(0,1) | _OUT(0), 0x80, path, &handle); // create
    } else if (access == O_RDWR) {
        err = _swix(OS_Find, _INR(0,1) | _OUT(0), 0xC0, path, &handle);
    } else if (access == O_WRONLY) {
        // MISSING CASE: open existing file RW, as WRONLY doesn't exist in RISC OS
        err = _swix(OS_Find, _INR(0,1) | _OUT(0), 0xC0, path, &handle);
    } else if (access == O_RDONLY) {
        err = _swix(OS_Find, _INR(0,1) | _OUT(0), 0x40, path, &handle);
    } else {
        errno = EINVAL;
        return -1;
    }

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return handle;
}

// Close a file descriptor
int os_close(int fd) {
    if (fd < 0) {
        errno = EBADF;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_Find, _INR(0,1), 0, fd); // Close file
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return 0;
}

// (RISC OS only) Close a file descriptor by matching its open path
int os_close_path(const char *path) {
    if (!path || *path == '\0') {
        errno = EINVAL;
        return -1;
    }

    // resolve the path to a full path
    char full_path[256];
    if (os_realpath(path, full_path, sizeof(full_path)) < 0) {
        errno = EINVAL;
        return -1;
    }

    char buf[256];

    for (int fd = 0; fd < 256; ++fd) {
        buf[0] = '\0';

        // Use OS_Args reason 7 to get path of open file handle
        int name_len = 0;
        const _kernel_oserror *err = _swix(OS_Args,
                                            _INR(0,3) | _OUT(3),
                                            7, fd, buf, sizeof(buf), &name_len);
        if (err || buf[0] == '\0')
            continue; // Skip invalid handles

        // Defensive: normalise both paths before comparing
        if (strcmp(buf, full_path) == 0) {
            // Confirm the handle is valid before closing
            int pos = 0;
            err = _swix(OS_Args, _INR(0,1) | _OUT(2), 0, fd, &pos);
            if (err) {
                // Handle likely invalid; skip
                continue;
            }

            // Close safely
            return os_close(fd);
        }
    }

    errno = ENOENT; // No matching open handle found
    return -1;
}

// Read from a file descriptor into a buffer
int os_read(int fd, void *buf, const size_t count) {
    if (fd < 0 || !buf || count == 0) {
        errno = EINVAL;
        return -1;
    }

    int not_read = 0;
    const _kernel_oserror *err = _swix(OS_GBPB, _INR(0,3) | _OUTR(3,3),
                                        4, fd, buf, count, &not_read);

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }
    return (int)(count - not_read);
}

int os_read_and_close(int fd, void **buf_out, size_t *len_out) {
    if (fd < 0 || !buf_out || !len_out) {
        errno = EINVAL;
        return -1;
    }

    *buf_out = NULL;
    *len_out = 0;

    os_stat_t st;
    if (os_stat_fd(fd, &st) < 0) {
        os_close(fd);
        return -1;
    }

    size_t size = st.st_size;
    void *buf = malloc(size + 1); // +1 for optional null terminator
    if (!buf) {
        os_close(fd);
        errno = ENOMEM;
        return -1;
    }

    int n = os_read(fd, buf, size);
    os_close(fd);

    if (n < 0) {
        free(buf);
        return -1;
    }

    ((char *)buf)[n] = '\0'; // Null-terminate just in case (optional)
    *buf_out = buf;
    *len_out = n;
    return n;
}

// Write to a file descriptor from a buffer
int os_write(int fd, const void *buf, const size_t count) {
    if (fd < 0 || !buf || count == 0) {
        errno = EINVAL;
        return -1;
    }

    int not_written = 0;
    const _kernel_oserror *err = _swix(OS_GBPB,
                                _INR(0,3) | _OUTR(3,3),
                                2, fd, (void *)buf, count, &not_written);

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return count - not_written;
}

// Seek to a specific position in a file descriptor
// whence: 0 = SEEK_SET, 1 = SEEK_CUR, 2 = SEEK_END
long os_lseek(int fd, long offset, int whence) {
    if (fd < 0) {
        errno = EBADF;
        return -1;
    }

    int current = 0;
    os_stat_t st;

    switch (whence) {
        case SEEK_SET:
            break;

        case SEEK_CUR:
            if (_swix(OS_Args, _INR(0,1) | _OUT(2), 0, fd, &current)) {
                errno = EIO;
                return -1;
            }
            offset += current;
            break;

        case SEEK_END:
            if (os_stat_fd(fd, &st) < 0) {
                return -1;
            }
            offset += st.st_size;
            break;

        default:
            errno = EINVAL;
            return -1;
    }

    if (_swix(OS_Args, _INR(0,2), 1, fd, offset)) {
        errno = EIO;
        return -1;
    }

    return offset;
}

// Rewind directory to beginning
void os_rewinddir(os_dir_t *dirp) {
    if (!dirp) {
        errno = EINVAL;
        return;
    }
    dirp->context = 0;
}

// Return current directory read position (context value)
long os_telldir(os_dir_t *dirp) {
    if (!dirp) {
        errno = EINVAL;
        return -1;
    }
    return dirp->context;
}

// Seek to a saved directory position (context value)
void os_seekdir(os_dir_t *dirp, long loc) {
    if (!dirp || loc < 0) {
        errno = EINVAL;
        return;
    }
    dirp->context = (int)loc;
}

// Open a directory stream
os_dir_t *os_opendir(const char *path) {
    if (!path || *path == '\0') {
        errno = EINVAL;
        return NULL;
    }

    os_dir_t *dir = malloc(sizeof(os_dir_t));
    if (!dir) {
        errno = ENOMEM;
        return NULL;
    }

    strncpy(dir->path, path, sizeof(dir->path) - 1);
    dir->path[sizeof(dir->path) - 1] = '\0';
    dir->context = 0;
    memset(dir->entry, 0, sizeof(dir->entry));
    return dir;
}

// Read the next entry in a directory stream
os_dirent_t *os_readdir(os_dir_t *dirp) {
    if (!dirp) {
        errno = EINVAL;
        return NULL;
    }

    const _kernel_oserror *err = _swix(OS_GBPB, _INR(0,5) | _OUT(4),
        10, dirp->path, dirp->entry, 1, dirp->context,
        sizeof(dirp->entry), &dirp->context);

    if (err) {
        errno = os_map_error(err->errnum);
        return NULL;
    }

    if (dirp->context == -1)
        return NULL;

    static os_dirent_t ent;
    strncpy(ent.d_name, dirp->entry, sizeof(ent.d_name) - 1);
    ent.d_name[sizeof(ent.d_name) - 1] = '\0';
    return &ent;
}

// Close a directory stream
int os_closedir(os_dir_t *dirp) {
    if (!dirp) {
        errno = EINVAL;
        return -1;
    }
    free(dirp);
    return 0;
}

// Change file mode (not supported in RISC OS)
int os_chmod(const char *path, int mode) {
    (void)path; (void)mode;
    errno = ENOTSUP;
    return -1;
}

// Change file mode (not supported in RISC OS)
int os_fchmod(int fd, int mode) {
    (void)fd; (void)mode;
    errno = ENOTSUP;
    return -1;
}

// Change file ownership (not supported in RISC OS)
int os_chown(const char *path, int owner, int group) {
    (void)path; (void)owner; (void)group;
    errno = ENOTSUP;
    return -1;
}

// Change file ownership (not supported in RISC OS)
int os_fchown(int fd, int owner, int group) {
    (void)fd; (void)owner; (void)group;
    errno = ENOTSUP;
    return -1;
}

// Change file permissions (not supported in RISC OS)
int os_umask(int mask) {
    (void)mask;
    return 0; // always zero, no permission enforcement
}

// Truncate a file to a specific length
// This function is a bit tricky in RISC OS, as it doesn't have a direct equivalent.
int os_truncate(const char *path, long length) {
    if (!path || *path == '\0' || length < 0) {
        errno = EINVAL;
        return -1;
    }

    os_stat_t st;
    if (os_stat(path, &st) < 0)
        return -1;

    unsigned int curr_size = st.st_size;
    unsigned int new_size = (unsigned int)length;

    if (curr_size == new_size)
        return 0; // no-op

    // Allocate buffer
    void *buf = malloc(new_size);
    if (!buf) {
        errno = ENOMEM;
        return -1;
    }

    // Open file for reading
    int fd = os_open(path, O_RDONLY, 0);
    if (fd < 0) {
        free(buf);
        return -1;
    }

    const _kernel_oserror *err = NULL;
    int not_read = 0;
    err = _swix(OS_GBPB, _INR(0,3) | _OUT(3),
            4, fd, buf, new_size, &not_read);
    int read_bytes = new_size - (unsigned int)not_read;

    os_close(fd);

    if (err) {
        free(buf);
        errno = os_map_error(err->errnum);
        return -1;
    }

    // Pad with zeros if expanding
    if ((unsigned int)read_bytes < new_size) {
        memset(((char *)buf) + read_bytes, 0, new_size - read_bytes);
    }

    // Delete old file
    if (os_unlink(path) < 0) {
        free(buf);
        return -1;
    }

    // Recreate file
    fd = os_open(path, O_WRONLY | O_CREAT, 0);
    if (fd < 0) {
        free(buf);
        errno = ENOENT;
        return -1;
    }

    // Write truncated content
    if (os_lseek(fd, 0, 0) < 0) {
        free(buf);
        errno = EBADF;
        return -1;
    }

    if (os_write(fd, buf, new_size) != (int)new_size) {
        free(buf);
        errno = EIO;
        return -1;
    }

    os_close(fd);
    free(buf);

    if (err) {
        errno = err ? os_map_error(err->errnum) : EIO;
        return -1;
    }

    // Restore filetype using raw SWI (for now)
    // Could wrap later as: int os_setfiletype(const char *path, int filetype);
    _swix(OS_File, _INR(0,2), 18, path, (st.st_mode & 0xFFFF) << 8);

    return 0;
}

// Truncate a file to a specific length
int os_ftruncate(int fd, long length) {
    (void)fd; (void)length;
    errno = ENOTSUP;
    return -1;
}

// (RISC OS only) Merge two files in one
int os_merge(const char *dest, const char *src) {
    if (!dest || !src || *dest == '\0' || *src == '\0') {
        errno = EINVAL;
        return -1;
    }

    if (strcmp(dest, src) == 0) {
        errno = EINVAL; // Prevent merging a file into itself
        return -1;
    }

    char buf[1024];
    int r;

    int in = os_open(src, O_RDONLY, 0);
    if (in < 0) {
        return -1;
    }

    int out = os_open(dest, O_RDWR, 0);
    if (out < 0) {
        os_close(in);
        return -1;
    }

    // Seek to end of destination
    if (os_lseek(out, 0, 2) < 0) {
        os_close(in);
        os_close(out);
        return -1;
    }

    while ((r = os_read(in, buf, sizeof(buf))) > 0) {
        if (os_write(out, buf, r) != r) {
            os_close(in);
            os_close(out);
            errno = EIO;
            return -1;
        }
    }

    os_close(in);
    os_close(out);
    return 0;
}

// (RISC OS only) Split a file into two files at a given offset
int os_split(const char *path, long offset, const char *out1, const char *out2) {
    if (!path || !out1 || !out2 || offset < 0 ||
        *path == '\0' || *out1 == '\0' || *out2 == '\0') {
        errno = EINVAL;
        return -1;
    }

    int in = os_open(path, O_RDONLY, 0);
    if (in < 0) return -1;

    os_stat_t st;
    if (os_stat(path, &st) < 0) {
        os_close(in);
        return -1;
    }

    unsigned int size = st.st_size;
    if ((unsigned int)offset > size) {
        os_close(in);
        errno = EINVAL;
        return -1;
    }

    int part1 = os_open(out1, O_WRONLY | O_CREAT, 0);
    int part2 = os_open(out2, O_WRONLY | O_CREAT, 0);
    if (part1 < 0 || part2 < 0) {
        os_close(in);
        if (part1 >= 0) os_close(part1);
        if (part2 >= 0) os_close(part2);
        return -1;
    }

    char buf[1024];
    long r;
    int total = 0;

    // Write first part
    while (((long)total < offset) && (r = os_read(in, buf, sizeof(buf))) > 0) {
        size_t to_write = (size_t)r;
        if (((long)(total + r)) > offset) to_write = (size_t)(offset - (long)total);
        if (os_write(part1, buf, to_write) != (int)to_write) {
            errno = EIO;
            goto fail;
        }
        total += to_write;
        // buffer tail carry to second file if r > to_write
        if (to_write < r) {
            if (os_write(part2, buf + to_write, ((size_t)r) - to_write) != (r - to_write)) {
                errno = EIO;
                goto fail;
            }
            break;
        }
    }

    // Continue writing second part
    while ((r = os_read(in, buf, sizeof(buf))) > 0) {
        if (os_write(part2, buf, (size_t)r) != r) {
            errno = EIO;
            goto fail;
        }
    }

    os_close(in);
    os_close(part1);
    os_close(part2);
    return 0;

fail:
    os_close(in);
    os_close(part1);
    os_close(part2);
    return -1;
}
