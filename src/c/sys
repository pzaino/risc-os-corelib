/*
 * CoreLib - POSIX-like and SWI-safe C Library for RISC OS
 *
 * File: sys.c
 * Author: Paolo Fabio Zaino
 * Copyright (c) 1998-2025 by Paolo Fabio Zaino, all rights reserved
 * Distributed under: Mozilla Public License 2.0 (MPL-2.0)
 *
 * Description:
 *   This file is part of CoreLib, a safe and portable ANSI C99 library that
 *   provides POSIX-style APIs for RISC OS. It wraps RISC OS SWIs with strict
 *   validation and aims to be CLib-independent while enabling safe development
 *   of applications, kernel modules, and system utilities.
 *
 *   This source code is licensed under the terms of the Mozilla Public License
 *   Version 2.0. You may obtain a copy of the license at:
 *   https://www.mozilla.org/MPL/2.0/
 *
 *   SPDX-License-Identifier: MPL-2.0
 */

/* sys.c - System information wrappers for RISC OS SWIs (CoreLib) */

#include "common.h"
#include "sys.h"
#include "fs.h"
#include "fcntl.h"
#include "proc.h"
#include "safe_str.h"

// Get the system name and version
int os_uname(struct os_utsname *name) {
    if (!name) {
        errno = EINVAL;
        return -1;
    }

    safe_strncpy(name->sysname,  "RISCOS",    sizeof(name->sysname));
    safe_strncpy(name->nodename, "localhost", sizeof(name->nodename));
    safe_strncpy(name->machine,  "ARM",       sizeof(name->machine));
    safe_strncpy(name->release,  "unknown",   sizeof(name->release));
    safe_strncpy(name->version,  "unknown",   sizeof(name->version));

    const _kernel_oserror *err = _swix(OS_Byte, _INR(0,1) | _OUT(0), 0, 0);
    if (err && err->errmess) {
        safe_strncpy(name->release, err->errmess, sizeof(name->release));
        safe_strncpy(name->version, err->errmess, sizeof(name->version));

        // Detect machine type
        os_sysinfo_t info;
        if (os_get_sysinfo(&info) == 0) {
            safe_strncpy(name->machine, os_detect_machine(&info), sizeof(name->machine));
        }
    }

    return 0;
}

// Get hostname (same as nodename from uname)
// TODO: Implement a proper hostname retrieval
//       mechanism if possible
int os_gethostname(char *name, size_t len) {
    if (!name || len == 0) {
        errno = EINVAL;
        return -1;
    }

    safe_strncpy(name, "localhost", len);
    return 0;
}

// Return UID/GID info — RISC OS is single-user, always root-equivalent
int os_getuid(void)    { return 0; }
int os_geteuid(void)   { return 0; }
int os_getgid(void)    { return 0; }
int os_getegid(void)   { return 0; }

// Return user login name — fixed on RISC OS
char *os_getlogin(void) {
    return "riscos";
}

// Detect CPU type based on chip flags and info
int os_get_cpu_id(void) {
    int cpu_id = 0;
    const _kernel_oserror *err = _swix(OS_ReadSysInfo, _IN(0) | _OUT(0), 1, &cpu_id);
    if (err) return -1;
    return cpu_id;
}

// Detect MAchine type based on chip flags and info
const char *os_detect_machine(const os_sysinfo_t *info) {
    if (!info) return "Unknown";

    // Prefer HAL detection
    if (info->hal_device[0]) {
        if (safe_strstr(info->hal_device, "Raspberry", 64, IGNORE_CASE)) return "Raspberry Pi";
        if (safe_strstr(info->hal_device, "Titanium", 64, IGNORE_CASE))  return "Titanium";
        if (safe_strstr(info->hal_device, "i.MX6", 64, IGNORE_CASE))     return "i.MX6";
        return info->hal_device;  // Generic fallback
    }

    // Legacy detection fallback...
    if ((*(info->iomd_variant) != '\0') && safe_strncmp(info->iomd_variant, "IOMDL", 64, IGNORE_CASE) == 0) {
        if ((*(info->iomd_variant) != '\0') && safe_strncmp(info->vidc_variant, "VIDC2L", 64, IGNORE_CASE) == 0)
            return "Acorn A7000(+) (ARM7500)";
        return "ARM7500-family";
    }

    if ((*(info->mem_controller) != '\0') && safe_strncmp(info->mem_controller, "IOMD", 64, IGNORE_CASE) == 0) {
        if ((*(info->mem_controller) != '\0') && safe_strncmp(info->video_controller, "VIDC20", 64, IGNORE_CASE) == 0) {
            if (os_get_cpu_id() == 0x1C)  // Bit 12 indicates StrongARM in some RiscPC variants
                return "Acorn RiscPC (StrongARM)";
            return "Acorn RiscPC (ARM610/ARM700)";
        }
        return "IOMD System";
    }

    if ((*(info->io_controller) != '\0') && safe_strncmp(info->io_controller, "IOC", 64, IGNORE_CASE) == 0) {
        if ((*(info->io_controller) != '\0') && safe_strncmp(info->video_controller, "VIDC1a", 64, IGNORE_CASE) == 0)
            return "Acorn Archimedes (ARM2/ARM3)";
        return "IOC System";
    }

    if ((*(info->mem_controller) != '\0') && safe_strncmp(info->mem_controller, "MEMC", 64, IGNORE_CASE) == 0)
        return "Acorn Archimedes (ARM2)";

    return "ARM";
}

// Get system information (chip flags, unique ID, etc.)
int os_get_sysinfo(os_sysinfo_t *info) {
    if (!info) {
        errno = EINVAL;
        return -1;
    }

    safe_memset(info, 0, sizeof(os_sysinfo_t));  // Zero all fields

    int r0, r1, r2, r3, r4;
    const _kernel_oserror *err = _swix(OS_ReadSysInfo, _IN(0) | _OUTR(0,4),
                                       2, &r0, &r1, &r2, &r3, &r4);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    info->hw_word_0 = r0;
    info->hw_word_1 = r1;
    info->hw_word_2 = r2;
    info->unique_id_low  = r3;
    info->unique_id_high = r4;

    // Decode hardware word 0
    int sf_chip  = (r0 >> 0) & 0xFF;
    int io_ctrl  = (r0 >> 8) & 0xFF;
    int mem_ctrl = (r0 >> 16) & 0xFF;
    int vid_ctrl = (r0 >> 24) & 0xFF;

    safe_strncpy(info->special_chip,
                 (sf_chip == 1) ? "IOEB" : "None",
                 sizeof(info->special_chip));
    safe_strncpy(info->io_controller,
                 (io_ctrl == 1) ? "IOMD" :
                 (io_ctrl == 0) ? "IOC" : "Unspecified",
                 sizeof(info->io_controller));
    safe_strncpy(info->mem_controller,
                 (mem_ctrl == 1) ? "IOMD" :
                 (mem_ctrl == 0) ? "MEMC" : "Unspecified",
                 sizeof(info->mem_controller));
    safe_strncpy(info->video_controller,
                 (vid_ctrl == 1) ? "VIDC20" :
                 (vid_ctrl == 0) ? "VIDC1a" : "Unspecified",
                 sizeof(info->video_controller));

    // Decode hardware word 1
    int io_chip = (r1 & 0xFF);
    safe_strncpy(info->io_chip,
                 (io_chip == 1) ? "82C710" : "None",
                 sizeof(info->io_chip));

    // Decode hardware word 2
    int lcd_type     = (r2 >> 0) & 0xFF;
    int iomd_variant = (r2 >> 8) & 0xFF;
    int vidc_variant = (r2 >> 16) & 0xFF;
    int iic_speed    = (r2 >> 24) & 0x1;
    int clk_idle     = (r2 >> 25) & 0x1;

    safe_strncpy(info->lcd_controller,
                 (lcd_type == 1) ? "LCD type 1" :
                 (lcd_type == 2) ? "LCD type 2" : "None",
                 sizeof(info->lcd_controller));
    safe_strncpy(info->iomd_variant,
                 (iomd_variant == 1) ? "IOMDL" :
                 (iomd_variant == 0) ? "IOMD" : "Unspecified",
                 sizeof(info->iomd_variant));
    safe_strncpy(info->vidc_variant,
                 (vidc_variant == 1) ? "VIDC2L" :
                 (vidc_variant == 0) ? "VIDC20" : "Unspecified",
                 sizeof(info->vidc_variant));

    info->iic_fast       = iic_speed;
    info->idle_stops_clk = clk_idle;

    // Optional: read HAL device string (undocumented)
    int has_extended = 0;
    _swix(OS_ReadSysInfo, _IN(0) | _OUT(0), 12, &has_extended);
    if (has_extended) {
        char hal_str[SYS_STR_LONG] = {0};
        const _kernel_oserror *err = _swix(OS_ReadSysInfo, _INR(0,1), 13, hal_str);
        if (!err) {
            safe_strncpy(info->hal_device, hal_str, sizeof(info->hal_device));
        }
    }

    return 0;
}

