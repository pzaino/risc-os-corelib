/* service.c - Wrapper for service call interactions in RISC OS (CoreLib) */

#include "common.h"
#include "service.h"

#include <errno.h>
#include <string.h>

// Deliver a service call (broadcast to modules)
int os_service_call(int number, int *regs) {
    if (number <= 0 || number >= 0x10000) {
        errno = EINVAL;
        return -1;
    }

    int r0 = number;
    int r1 = regs ? regs[1] : 0;
    int r2 = regs ? regs[2] : 0;
    int r3 = regs ? regs[3] : 0;
    int r4 = regs ? regs[4] : 0;
    int r5 = regs ? regs[5] : 0;
    int r6 = regs ? regs[6] : 0;
    int r7 = regs ? regs[7] : 0;
    int r8 = regs ? regs[8] : 0;
    int r9 = regs ? regs[9] : 0;

    const _kernel_oserror *err = _swix(OS_ServiceCall,
                                       _INR(0,9) | _OUTR(0,9),
                                       r0, r1, r2, r3, r4, r5, r6, r7, r8, r9,
                                       &r0, &r1, &r2, &r3, &r4, &r5, &r6, &r7, &r8, &r9);

    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    if (regs) {
        regs[0] = r0;
        regs[1] = r1;
        regs[2] = r2;
        regs[3] = r3;
        regs[4] = r4;
        regs[5] = r5;
        regs[6] = r6;
        regs[7] = r7;
        regs[8] = r8;
        regs[9] = r9;
    }

    return 0;
}

// Register a callback
int os_add_callback(void (*callback)(void)) {
    if (!callback) {
        errno = EINVAL;
        return -1;
    }

    const _kernel_oserror *err = _swix(OS_AddCallBack,
                                       _IN(0),
                                       callback);
    if (err) {
        errno = os_map_error(err->errnum);
        return -1;
    }

    return 0;
}

// Remove callback (not supported)
int os_remove_callback(void (*callback)(void)) {
    (void)callback;
    errno = ENOTSUP;
    return -1;
}
